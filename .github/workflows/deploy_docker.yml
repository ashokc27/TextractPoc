name: Deploy To ECR and EKS

on:
  workflow_call:
    inputs:
      version_label:
        required: true
        type: string
      environment:
        description: 'Environment to run the workflow against'
        type: string
        required: true
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

env:
  ECR_REPOSITORY: textractpoc
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
  EKS_DEPLOYMENT: ${{ vars.EKS_DEPLOYMENT }}
  EKS_NAMESPACE: ${{ vars.EKS_NAMESPACE }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }}

jobs:
  deploy:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    environment: ${{inputs.environment}}
    steps:
      # sharing docker image between jobs: https://github.com/docker/build-push-action/issues/225
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker Image
        uses: actions/cache@v3
        with:
          key: ${{ github.sha }}
          path: /tmp/textractPoc.tar
      - name: Load Docker image
        run: |
          docker load --input /tmp/textractPoc.tar
          docker image ls -a
      # todo: https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-amazon-elastic-container-service
      # upload to registry
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'false'
      - run: |
          docker tag textractpoc:latest ${{ env.ECR_REGISTRY }}/textractpoc:latest
          docker push ${{ env.ECR_REGISTRY }}/textractPoc --all-tags

      - name: Install and configure kubectl
        run: |
          VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
          --progress-bar \
          --location \
          --remote-name
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/      

      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          RELEASE_IMAGE: ${{ env.ECR_REGISTRY }}/textractpoc:${{ github.sha }}
          # KUBECTL_VERSION: "v1.22.0"
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_DEFAULT_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}      
          kubectl set image deployment/$EKS_DEPLOYMENT $EKS_DEPLOYMENT=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG  -n $EKS_NAMESPACE        
          if ! kubectl rollout status deployment/$EKS_DEPLOYMENT -n $EKS_NAMESPACE --timeout=2m; then
                exit_code=1
            fi
            pods=$(kubectl get pods -l app=$EKS_DEPLOYMENT -n $EKS_NAMESPACE -o name)
            for pod in $pods
            do
                echo "Printing logs for $pod"
                if kubectl get $pod -n $EKS_NAMESPACE > /dev/null 2>&1; then
                  kubectl logs --all-containers=true $pod -n $EKS_NAMESPACE
                else
                  echo "Pod $pod not found"
                fi
            done
            exit ${exit_code:-0}